// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package presetsdkgo

import (
	"bytes"
	"context"
	"fmt"
	"github.com/speakeasy-sdks/preset-sdk-go/pkg/models/operations"
	"github.com/speakeasy-sdks/preset-sdk-go/pkg/models/sdkerrors"
	"github.com/speakeasy-sdks/preset-sdk-go/pkg/utils"
	"io"
	"net/http"
)

// PresetManagerAPIsGreaterThanEmbedded - APIs associated with the Embedded functionality.
type PresetManagerAPIsGreaterThanEmbedded struct {
	sdkConfiguration sdkConfiguration
}

func newPresetManagerAPIsGreaterThanEmbedded(sdkConfig sdkConfiguration) *PresetManagerAPIsGreaterThanEmbedded {
	return &PresetManagerAPIsGreaterThanEmbedded{
		sdkConfiguration: sdkConfig,
	}
}

// PostAPIV1TeamsTeamSlugWorkspacesWorkspaceSlugGuestToken - Create a new Guest Token
// Creates a new Guest Token to be used with Embedded.
//
// Replace in the URL:
//
// - `{{WorkspaceSlug}}` with the `name` retrieved through the API (using the **Get Workspaces from a Team** endpoint).
// - `{{TeamSlug}}` with the `name` retrieved through the API (using the **Get Preset Teams** endpoint). Alternatively, access the team administration through the UI, and get the `{{TeamSlug}}` from the URL -> `https://manage.app.preset.io/app/teams/{{TeamSlug}}/members`.
//
// For instructions on how to populate the body, refer to [our documentation](https://preset-io.github.io/embedded-beta-docs/v1).
func (s *PresetManagerAPIsGreaterThanEmbedded) PostAPIV1TeamsTeamSlugWorkspacesWorkspaceSlugGuestToken(ctx context.Context, request operations.PostAPIV1TeamsTeamSlugWorkspacesWorkspaceSlugGuestTokenRequest) (*operations.PostAPIV1TeamsTeamSlugWorkspacesWorkspaceSlugGuestTokenResponse, error) {
	baseURL := utils.ReplaceParameters(s.sdkConfiguration.GetServerDetails())
	url, err := utils.GenerateURL(ctx, baseURL, "/api/v1/teams/{TeamSlug}/workspaces/{WorkspaceSlug}/guest-token/", request, nil)
	if err != nil {
		return nil, fmt.Errorf("error generating URL: %w", err)
	}

	bodyReader, reqContentType, err := utils.SerializeRequestBody(ctx, request, false, true, "RequestBody", "json", `request:"mediaType=application/json"`)
	if err != nil {
		return nil, fmt.Errorf("error serializing request body: %w", err)
	}

	req, err := http.NewRequestWithContext(ctx, "POST", url, bodyReader)
	if err != nil {
		return nil, fmt.Errorf("error creating request: %w", err)
	}
	req.Header.Set("Accept", "*/*")
	req.Header.Set("user-agent", s.sdkConfiguration.UserAgent)

	req.Header.Set("Content-Type", reqContentType)

	utils.PopulateHeaders(ctx, req, request)

	client := s.sdkConfiguration.SecurityClient

	httpRes, err := client.Do(req)
	if err != nil {
		return nil, fmt.Errorf("error sending request: %w", err)
	}
	if httpRes == nil {
		return nil, fmt.Errorf("error sending request: no response")
	}

	contentType := httpRes.Header.Get("Content-Type")

	res := &operations.PostAPIV1TeamsTeamSlugWorkspacesWorkspaceSlugGuestTokenResponse{
		StatusCode:  httpRes.StatusCode,
		ContentType: contentType,
		RawResponse: httpRes,
	}

	rawBody, err := io.ReadAll(httpRes.Body)
	if err != nil {
		return nil, fmt.Errorf("error reading response body: %w", err)
	}
	httpRes.Body.Close()
	httpRes.Body = io.NopCloser(bytes.NewBuffer(rawBody))
	switch {
	case httpRes.StatusCode == 200:
	case httpRes.StatusCode >= 400 && httpRes.StatusCode < 500:
		fallthrough
	case httpRes.StatusCode >= 500 && httpRes.StatusCode < 600:
		return nil, sdkerrors.NewSDKError("API error occurred", httpRes.StatusCode, string(rawBody), httpRes)
	}

	return res, nil
}
